// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model User {
  id                      Int      @id @default(autoincrement())
  firstName               String
  lastName                String
  birthDate               DateTime
  address                 String
  postalCode              Int
  city                    String
  phoneNumber             String
  email                   String   @unique
  password                String
  roleId                  Int
  role                    Role     @relation(fields: [roleId], references: [id])
  canAccessCriticalEvents Boolean  @default(false)

  Schedules        Schedule[]
  sentMessages     Message[]          @relation("SentMessages")
  receivedMessages MessageRecipient[] @relation("ReceivedMessages")
}

model Event {
  id             Int       @id @default(autoincrement())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  location       String?
  city           String?
  contactName    String?
  contactPhone   String?
  instructions   String?
  requiredAgents Int?
  eventType      String?
  duration       Int?
  meetHour       DateTime?
  isCritical     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?

  Schedules Schedule[]
  messages  Message[]
}

model Schedule {
  id            Int            @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  userId        Int
  eventId       Int
  status        ScheduleStatus @default(PENDING)
  refusalReason String?

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  eventId   Int
  createdAt DateTime @default(now())

  sender     User               @relation("SentMessages", fields: [senderId], references: [id])
  event      Event              @relation(fields: [eventId], references: [id])
  recipients MessageRecipient[] @relation("MessageRecipients")
}

model MessageRecipient {
  id        Int @id @default(autoincrement())
  messageId Int
  userId    Int
  isRead    Boolean                    @default(false)

  message Message @relation("MessageRecipients", fields: [messageId], references: [id])
  user    User    @relation("ReceivedMessages", fields: [userId], references: [id])
}

enum ScheduleStatus {
  PENDING
  ACCEPTED
  REFUSED
}
